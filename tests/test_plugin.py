import pytest
import click
from unittest.mock import patch
from vpype import Document
from gscrib.enums import DirectWrite
from gscrib.excepts import DeviceError
from vpype_gscrib.vpype_gscrib import process_document


# --------------------------------------------------------------------
# Fixtures and helper classes
# --------------------------------------------------------------------

@pytest.fixture
def empty_document():
    document = Document()
    document.page_size = (100, 100)
    return document

@pytest.fixture
def valid_document():
    document = Document()
    document.page_size = (100, 100)
    document.add([(0, 0), (50, 50)], 1)
    return document

@pytest.fixture
def invalid_document():
    document = Document()
    document.add([(0, 0), (50, 50)], 1)
    return document


# --------------------------------------------------------------------
# Test cases
# --------------------------------------------------------------------

def test_process_document(valid_document):
    result = process_document(valid_document)
    assert isinstance(result, Document)

def test_empty_document(empty_document):
    with pytest.raises(click.UsageError):
        process_document(empty_document)

def test_missing_page_size(invalid_document):
    with pytest.raises(click.UsageError):
        process_document(invalid_document)

def test_automatic_print_lines(capsys, valid_document):
    kwargs = {
        "output": None,
        "direct_write": DirectWrite.OFF,
    }

    process_document(valid_document, **kwargs)
    assert "Generated by: vpype-gscrib" in capsys.readouterr().out

def test_invalid_config(valid_document):
    kwargs = { "length_units": "invalid_value" }

    with pytest.raises(click.UsageError):
        process_document(valid_document, **kwargs)

def test_invalid_toml_content(valid_document, tmp_path):
    test_file = tmp_path / "test.txt"
    test_file.write_text("<invalid content>")
    path = str(test_file.absolute())

    with pytest.raises(click.UsageError):
        process_document(valid_document, config=path)

def test_file_not_found(valid_document):
    kwargs = { "config": "nonexistent_config.toml" }

    with pytest.raises(click.UsageError):
        process_document(valid_document, **kwargs)

@patch("gscrib.GCodeCore.write", side_effect=DeviceError())
def test_device_error(mock_write, valid_document):
    with pytest.raises(click.Abort):
        process_document(valid_document)

